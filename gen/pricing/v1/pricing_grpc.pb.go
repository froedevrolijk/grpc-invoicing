// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pricingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricingServiceClient is the client API for PricingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricingServiceClient interface {
	ListPricing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PricingService_ListPricingClient, error)
	GetPricing(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*Pricing, error)
	CreatePricing(ctx context.Context, in *Pricing, opts ...grpc.CallOption) (*Pricing, error)
	UpdatePricing(ctx context.Context, in *Pricing, opts ...grpc.CallOption) (*Pricing, error)
	DeletePricing(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*Empty, error)
}

type pricingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingServiceClient(cc grpc.ClientConnInterface) PricingServiceClient {
	return &pricingServiceClient{cc}
}

func (c *pricingServiceClient) ListPricing(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PricingService_ListPricingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricingService_ServiceDesc.Streams[0], "/pricing.v1.PricingService/ListPricing", opts...)
	if err != nil {
		return nil, err
	}
	x := &pricingServiceListPricingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PricingService_ListPricingClient interface {
	Recv() (*ListPricingResponse, error)
	grpc.ClientStream
}

type pricingServiceListPricingClient struct {
	grpc.ClientStream
}

func (x *pricingServiceListPricingClient) Recv() (*ListPricingResponse, error) {
	m := new(ListPricingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pricingServiceClient) GetPricing(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*Pricing, error) {
	out := new(Pricing)
	err := c.cc.Invoke(ctx, "/pricing.v1.PricingService/GetPricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) CreatePricing(ctx context.Context, in *Pricing, opts ...grpc.CallOption) (*Pricing, error) {
	out := new(Pricing)
	err := c.cc.Invoke(ctx, "/pricing.v1.PricingService/CreatePricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) UpdatePricing(ctx context.Context, in *Pricing, opts ...grpc.CallOption) (*Pricing, error) {
	out := new(Pricing)
	err := c.cc.Invoke(ctx, "/pricing.v1.PricingService/UpdatePricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) DeletePricing(ctx context.Context, in *PricingRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pricing.v1.PricingService/DeletePricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricingServiceServer is the server API for PricingService service.
// All implementations must embed UnimplementedPricingServiceServer
// for forward compatibility
type PricingServiceServer interface {
	ListPricing(*Empty, PricingService_ListPricingServer) error
	GetPricing(context.Context, *PricingRequest) (*Pricing, error)
	CreatePricing(context.Context, *Pricing) (*Pricing, error)
	UpdatePricing(context.Context, *Pricing) (*Pricing, error)
	DeletePricing(context.Context, *PricingRequest) (*Empty, error)
	mustEmbedUnimplementedPricingServiceServer()
}

// UnimplementedPricingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPricingServiceServer struct {
}

func (UnimplementedPricingServiceServer) ListPricing(*Empty, PricingService_ListPricingServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPricing not implemented")
}
func (UnimplementedPricingServiceServer) GetPricing(context.Context, *PricingRequest) (*Pricing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricing not implemented")
}
func (UnimplementedPricingServiceServer) CreatePricing(context.Context, *Pricing) (*Pricing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePricing not implemented")
}
func (UnimplementedPricingServiceServer) UpdatePricing(context.Context, *Pricing) (*Pricing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePricing not implemented")
}
func (UnimplementedPricingServiceServer) DeletePricing(context.Context, *PricingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePricing not implemented")
}
func (UnimplementedPricingServiceServer) mustEmbedUnimplementedPricingServiceServer() {}

// UnsafePricingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServiceServer will
// result in compilation errors.
type UnsafePricingServiceServer interface {
	mustEmbedUnimplementedPricingServiceServer()
}

func RegisterPricingServiceServer(s grpc.ServiceRegistrar, srv PricingServiceServer) {
	s.RegisterService(&PricingService_ServiceDesc, srv)
}

func _PricingService_ListPricing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricingServiceServer).ListPricing(m, &pricingServiceListPricingServer{stream})
}

type PricingService_ListPricingServer interface {
	Send(*ListPricingResponse) error
	grpc.ServerStream
}

type pricingServiceListPricingServer struct {
	grpc.ServerStream
}

func (x *pricingServiceListPricingServer) Send(m *ListPricingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PricingService_GetPricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetPricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricing.v1.PricingService/GetPricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetPricing(ctx, req.(*PricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_CreatePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pricing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).CreatePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricing.v1.PricingService/CreatePricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).CreatePricing(ctx, req.(*Pricing))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_UpdatePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pricing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).UpdatePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricing.v1.PricingService/UpdatePricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).UpdatePricing(ctx, req.(*Pricing))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_DeletePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).DeletePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pricing.v1.PricingService/DeletePricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).DeletePricing(ctx, req.(*PricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PricingService_ServiceDesc is the grpc.ServiceDesc for PricingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pricing.v1.PricingService",
	HandlerType: (*PricingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPricing",
			Handler:    _PricingService_GetPricing_Handler,
		},
		{
			MethodName: "CreatePricing",
			Handler:    _PricingService_CreatePricing_Handler,
		},
		{
			MethodName: "UpdatePricing",
			Handler:    _PricingService_UpdatePricing_Handler,
		},
		{
			MethodName: "DeletePricing",
			Handler:    _PricingService_DeletePricing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPricing",
			Handler:       _PricingService_ListPricing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pricing/v1/pricing.proto",
}
